#pragma once
#include <vector>
#include "renderable.h"
#include <glm/ext.hpp>  
#include <glm/gtx/string_cast.hpp>

class shape {
public:
	std::vector<float> positions;
	std::vector<float> colors;
	std::vector<float> normals;
	std::vector<float> texcoords;
	std::vector<float> tangents;

	std::vector<unsigned int> indices;
	std::vector<unsigned int> edge_indices;


	unsigned int vn, fn;

	void to_renderable(renderable & r) {
		r.create();
		r.add_vertex_attribute<float>(&positions[0], 3*vn, 0, 3);
		if (!normals.empty())
			r.add_vertex_attribute<float>(&normals[0], 3 * vn, 2, 3);

		if(!colors.empty())
			r.add_vertex_attribute<float>(&colors[0], 3 * vn, 1, 3);
		if (!texcoords.empty())
			r.add_vertex_attribute<float>(&texcoords[0], 2 * vn, 3, 2);
		if (!tangents.empty())
			r.add_vertex_attribute<float>(&tangents[0], 3 * vn, 4, 3);
		if(!indices.empty())
			r.add_indices(&indices[0], fn * 3, GL_TRIANGLES);
		if (!edge_indices.empty())
			r.add_element_array(&edge_indices[0], fn * 6, GL_LINES);
	}
private:
	float cross(glm::vec2 a, glm::vec2 b) {
		return a.x*b.y - a.y*b.x;
	}

	glm::vec3 to_vec3(int i, std::vector<float> & v) {
		return glm::vec3(v[i * 3], v[i * 3 + 1], v[i * 3 + 2]);
	}
	glm::vec2 tcoord(int i) {
		return glm::vec2(texcoords[2*i], texcoords[2*i + 1]);
	}
	glm::vec2 compute_tangent_frame(glm::vec2 t0, glm::vec2 t1, glm::vec2 t2) {
		glm::vec2 t10 = t1-t0;
		glm::vec2 t20 = t2-t0;
		
		float area1  = cross(glm::vec2(1, 0), t20); 
		float area2  = cross(t10, glm::vec2(1, 0));
		float area   = cross(t10, t20);

		return glm::vec2(area1  / area , area2  / area );
	}
public:
	void compute_tangent_space() {
		tangents.resize(positions.size(),0);
		std::vector<int> n_star;
		n_star.resize(vn, 0);
		glm::vec3	tangent;

		for (unsigned int it = 0; it < fn; ++it) {
			int x_pos = indices[it * 3] * 3;
			std::vector<glm::vec3> p;
			p.resize(3);
			p[0] = to_vec3(indices[it * 3]	,positions);
			p[1] = to_vec3(indices[it * 3+1],positions);
			p[2] = to_vec3(indices[it * 3+2],positions);

			std::vector<glm::vec2> t;
			t.resize(3);

			t[0] = tcoord(indices[it * 3]);
			t[1] = tcoord(indices[it * 3+1]);
			t[2] = tcoord(indices[it * 3+2]);

			for (int iv = 0; iv < 3; ++iv)
			{
				n_star[indices[it*3+iv]]++;

				glm::vec2 coords = compute_tangent_frame(t[iv], t[(iv + 1) % 3], t[(iv + 2) % 3]);
				//std::cout << "coords " << coords[0] << " " << coords[1] << "\n";

				glm::vec3 pos10 = (p[(iv + 1) % 3] - p[iv]);
				glm::vec3 pos20 = (p[(iv + 2) % 3] - p[iv]);
				tangent = normalize(coords[0]*pos10 + coords[1] * pos20);
				
				tangents[3 * indices[it * 3 + iv]	]   += tangent[0];
				tangents[3 * indices[it * 3 + iv] +1] += tangent[1];
				tangents[3 * indices[it * 3 + iv] +2] += tangent[2];
			}
		}

		for (unsigned int iv = 0; iv <vn; ++iv) {
			tangent = to_vec3(iv, tangents); 
			tangent /=  n_star[iv];
			tangent = glm::normalize(tangent);
			tangents[3 * iv]	 = tangent[0];
			tangents[3 * iv + 1] = tangent[1];
			tangents[3 * iv + 2] = tangent[2];

			//std::cout << "tangent " << iv << "\n";
			//std::cout << "x " << tangent[0] << "\n";
			//std::cout << "y " << tangent[1] << "\n";
			//std::cout << "z " << tangent[2] << "\n\n";
		}

		}

	void compute_edge_indices_from_indices() {
		for (unsigned int i = 0; i < indices.size() / 3; ++i) {
			edge_indices.push_back(indices[i * 3]);
			edge_indices.push_back(indices[i * 3 + 1]);

			edge_indices.push_back(indices[i * 3 + 1]);
			edge_indices.push_back(indices[i * 3 + 2]);

			edge_indices.push_back(indices[i * 3 + 2]);
			edge_indices.push_back(indices[i * 3 ]);
		}
	}

};

struct shape_maker {
	 

	 static void cube(shape & s,float r = 0.5, float g = 0.5, float b = 0.5) {
		// vertices definition
		////////////////////////////////////////////////////////////
		s.positions = {
					   -1.0, -1.0, 1.0,
					   1.0, -1.0, 1.0,
					   -1.0, 1.0, 1.0,
					   1.0, 1.0, 1.0,
					   -1.0, -1.0, -1.0,
					   1.0, -1.0, -1.0,
					   -1.0, 1.0, -1.0,
					   1.0, 1.0, -1.0
		};
		s.colors = {
			r,g,b,
			r,g,b,
			r,g,b,
			r,g,b,
			r,g,b,
			r,g,b,
			r,g,b,
			r,g,b		};
		// triangles definition
		////////////////////////////////////////////////////////////

		s.indices = {
					   0, 1, 2, 2, 1, 3,  // front
					   5, 4, 7, 7, 4, 6,  // back
					   4, 0, 6, 6, 0, 2,  // left
					   1, 5, 3, 3, 5, 7,  // right
					   2, 3, 6, 6, 3, 7,  // top
					   4, 5, 0, 0, 5, 1   // bottom
		};
		s.vn = 8;
		s.fn = 12;


	}

	 static renderable cube(float r = 0.5, float g = 0.5, float b = 0.5) {
		shape s;
		cube(s, r, g, b);
		renderable res;
		s.to_renderable(res);
		return res;
	 }

	 static renderable frame(float scale  = 1.f) {
		 shape  s;
		 // vertices definition
		 ////////////////////////////////////////////////////////////
		 s.positions = {
			 0.0,0.0,0.0,
			 1.0,0.0,0.0,
			 0.0,0.0,0.0,
			 0.0,1.0,0.0,
			 0.0,0.0,0.0,
			 0.0,0.0,1.0 
		 };
		 for (int i = 0; i < 18; ++i)
			 s.positions[i] *= scale;

		 s.colors = {
			 1.0,0.0,0.0,
			 1.0,0.0,0.0,
			 0.0,1.0,0.0,
			 0.0,1.0,0.0,
			 0.0,0.0,1.0,
			 0.0,0.0,1.0
		 };

		 // LINES definition
		 ////////////////////////////////////////////////////////////
		 s.vn = 6;
		 renderable res;
		 s.to_renderable(res);
		 return res;
	 }

	 static renderable line(float length = 1.f) {
		 shape  s;
		 // vertices definition
		 ////////////////////////////////////////////////////////////
		 s.positions = {
			 0.0,0.0,0.0,
			 0.0,1.0,0.0
		 };
		 s.positions[4] *= length;

		 // LINES definition
		 ////////////////////////////////////////////////////////////
		 s.vn = 2;
		 renderable res;
		 s.to_renderable(res);
		 return res;
	 }

		 static void cylinder(shape & s,int resolution, float r = 0.5, float g = 0.5, float b = 0.5)
	 {
		 // vertices definition
		 ////////////////////////////////////////////////////////////
 
		 s.positions.resize(3 * (2 * resolution + 2));

		 float radius = 1.0;
		 float angle;
		 float step = float(6.283185307179586476925286766559) / resolution;

		 // lower circle
		 int vertexoffset = 0;
		 for (int i = 0; i < resolution; i++) {

			 angle = -step * i;

			 s.positions[vertexoffset] = radius * std::cos(angle);
			 s.positions[vertexoffset + 1] = 0.0;
			 s.positions[vertexoffset + 2] = radius * std::sin(angle);
			 vertexoffset += 3;
		 }

		 // upper circle
		 for (int i = 0; i < resolution; i++) {

			 angle = -step * i;

			 s.positions[vertexoffset] = radius *  std::cos(angle);
			 s.positions[vertexoffset + 1] = 2.0;
			 s.positions[vertexoffset + 2] = radius *  std::sin(angle);
			 vertexoffset += 3;
		 }

		 s.positions[vertexoffset] = 0.0;
		 s.positions[vertexoffset + 1] = 0.0;
		 s.positions[vertexoffset + 2] = 0.0;
		 vertexoffset += 3;

		 s.positions[vertexoffset] = 0.0;
		 s.positions[vertexoffset + 1] = 2.0;
		 s.positions[vertexoffset + 2] = 0.0;

		 for (int i = 0; i < s.positions.size(); i += 3) {
			 s.colors.push_back(r);
			 s.colors.push_back(g);
			 s.colors.push_back(b);
		 }

		 // triangles definition
		 ////////////////////////////////////////////////////////////

		 s.indices.resize(3 * 4 * resolution);

		 // lateral surface
		 int triangleoffset = 0;
		 for (int i = 0; i < resolution; i++)
		 {
			 s.indices[triangleoffset] = i;
			 s.indices[triangleoffset + 1] = (i + 1) % resolution;
			 s.indices[triangleoffset + 2] = (i % resolution) + resolution;
			 triangleoffset += 3;

			 s.indices[triangleoffset] = (i % resolution) + resolution;
			 s.indices[triangleoffset + 1] = (i + 1) % resolution;
			 s.indices[triangleoffset + 2] = ((i + 1) % resolution) + resolution;
			 triangleoffset += 3;
		 }

		 // bottom of the cylinder
		 for (int i = 0; i < resolution; i++)
		 {
			 s.indices[triangleoffset] = i;
			 s.indices[triangleoffset + 1] = (i + 1) % resolution;
			 s.indices[triangleoffset + 2] = 2 * resolution;
			 triangleoffset += 3;
		 }

		 // top of the cylinder
		 for (int i = 0; i < resolution; i++)
		 {
			 s.indices[triangleoffset] = resolution + i;
			 s.indices[triangleoffset + 1] = ((i + 1) % resolution) + resolution;
			 s.indices[triangleoffset + 2] = 2 * resolution + 1;
			 triangleoffset += 3;
		 }

		 s.vn = static_cast<unsigned int> (s.positions.size()  / 3);
		 s.fn = static_cast<unsigned int> (s.indices.size() / 3);

		 
	 }

	static renderable cylinder(int resolution, float r = 0.5, float g = 0.5, float b = 0.5) {
			shape s;
			cylinder(s, resolution, r,g,b);
			renderable res;
			s.to_renderable(res);
			return res;
	}


	static void rectangle(shape & s) {

		s.positions.resize(3 * 4);
		s.texcoords.resize(2 * 4);

		s.positions = {-1,0,1,  1,0,1, 1,0,-1, -1,0,-1};
		s.texcoords = { 0.0,0.0,1.0,0.0,1.0,1.0,0.0,1.0};
		s.normals  =  { 0,1,0, 0,1,0, 0,1,0, 0,1,0 };

		s.indices = { 0,1,2, 0,2,3 };
		s.vn = 4;
		s.fn = 2;
	}

	 static void rectangle(shape & s, unsigned int nX, unsigned int nY) {
		
		 s.positions.resize(3 * (nX + 1)*(nY + 1));
		 s.texcoords.resize(2 * (nX + 1)*(nY + 1));

		 for (unsigned int i = 0; i < nX + 1; ++i)
			 for (unsigned int j = 0; j < nY + 1; ++j){
				 s.positions[3 * (j*(nX + 1) + i) + 0] =-1.f + 2 * j / float(nY);
				 s.positions[3 * (j*(nX + 1) + i) + 1] = 0.f;
				 s.positions[3 * (j*(nX + 1) + i) + 2] =  -1.f + 2 * i / float(nX);

				 s.texcoords[2 * (j*(nX + 1) + i) + 0] = ( -1.f + 2 * j / float(nY) /2.f+1.f);
				 s.texcoords[2 * (j*(nX + 1) + i) + 1] = (-1.f + 2 * i / float(nX) / 2.f + 1.f);
			 }
		 for (unsigned int i = 0; i < s.positions.size() / 3; ++i) {
			 s.normals.push_back(0.0);
			 s.normals.push_back(1.0);
			 s.normals.push_back(0.0);
		 }


		 for (unsigned int i = 0; i < nX ; ++i)
			 for (unsigned int j = 0; j < nY  ; ++j) {
					s.indices.push_back(j    *(nX + 1) + i    );
					s.indices.push_back(j    *(nX + 1) + i + 1);
					s.indices.push_back((j+1)*(nX + 1) + i + 1 );

					s.indices.push_back(j      *(nX + 1) + i);
					s.indices.push_back((j + 1)*(nX + 1) + i + 1);
					s.indices.push_back((j + 1)*(nX + 1) + i);
			 }

		 s.vn = static_cast<unsigned int> (s.positions.size() / 3);
		 s.fn = static_cast<unsigned int> (s.indices.size() / 3);
	 }

	 static renderable rectangle(unsigned int nX, unsigned int nY) {
		 renderable res;
		 shape s;
		 rectangle(s, nX, nY);
		 s.to_renderable(res);
		 return res;
	 }

	 static void sphere (shape & s){
		 s.positions = {
		 0.399607f, 0.912982f, 0.0823236f, 0.399607f, 0.912982f, -0.0823236f, 0.266405f, 0.963861f, 0.f, 0.262866f, 0.951057f, 0.16246f, 0.525731f, 0.850651f, 0.f, 0.262866f, 0.951057f, -0.16246f, 0.133071f, 0.987688f, 0.0822425f, 0.133071f, 0.987688f, -0.0822425f, 0.f, 1.f, 0.f, 0.519258f, 0.840178f, 0.156434f,
		0.386187f, 0.891007f, 0.238677f, 0.5f, 0.809017f, 0.309017f, 0.386187f, 0.891007f, -0.238677f, 0.519258f, 0.840178f, -0.156434f, 0.5f, 0.809017f, -0.309017f, 0.132792f, 0.966393f, -0.220117f, 0.264083f, 0.916244f, -0.301259f, 0.131655f, 0.924305f, -0.358229f, 0.f, 0.961938f, -0.273267f, 0.259892f, 0.862668f, -0.433889f,
		0.f, 0.915043f, -0.403355f, 0.1312f, 0.864929f, -0.484442f, 0.f, 0.850651f, -0.525731f, 0.f, 0.990439f, -0.137952f, 0.383614f, 0.843911f, -0.375039f, 0.264083f, 0.916244f, 0.301259f, 0.132792f, 0.966393f, 0.220117f, 0.131655f, 0.924305f, 0.358229f, 0.259892f, 0.862668f, 0.433889f, 0.f, 0.961938f, 0.273267f,
		0.1312f, 0.864929f, 0.484442f, 0.f, 0.915043f, 0.403355f, 0.f, 0.850651f, 0.525731f, 0.383614f, 0.843911f, 0.375039f, 0.f, 0.990439f, 0.137952f, 0.62024f, 0.780204f, -0.0811418f, 0.62024f, 0.780204f, 0.0811418f, 0.711282f, 0.702907f, 0.f, 0.702046f, 0.693781f, -0.160622f, 0.702046f, 0.693781f, 0.160622f,
		0.783843f, 0.615642f, -0.0810863f, 0.783843f, 0.615642f, 0.0810863f, 0.850651f, 0.525731f, 0.f, 0.606825f, 0.758652f, -0.237086f, 0.606825f, 0.758652f, 0.237086f, -0.399607f, 0.912982f, -0.0823236f, -0.399607f, 0.912982f, 0.0823236f, -0.266405f, 0.963861f, 0.f, -0.262866f, 0.951057f, -0.16246f, -0.525731f, 0.850651f, 0.f,
		-0.262866f, 0.951057f, 0.16246f, -0.133071f, 0.987688f, -0.0822425f, -0.133071f, 0.987688f, 0.0822425f, -0.519258f, 0.840178f, -0.156434f, -0.386187f, 0.891007f, -0.238677f, -0.5f, 0.809017f, -0.309017f, -0.386187f, 0.891007f, 0.238677f, -0.519258f, 0.840178f, 0.156434f, -0.5f, 0.809017f, 0.309017f, -0.132792f, 0.966393f, 0.220117f,
		-0.264083f, 0.916244f, 0.301259f, -0.131655f, 0.924305f, 0.358229f, -0.259892f, 0.862668f, 0.433889f, -0.1312f, 0.864929f, 0.484442f, -0.383614f, 0.843911f, 0.375039f, -0.264083f, 0.916244f, -0.301259f, -0.132792f, 0.966393f, -0.220117f, -0.131655f, 0.924305f, -0.358229f, -0.259892f, 0.862668f, -0.433889f, -0.1312f, 0.864929f, -0.484442f,
		-0.383614f, 0.843911f, -0.375039f, -0.62024f, 0.780204f, 0.0811418f, -0.62024f, 0.780204f, -0.0811418f, -0.711282f, 0.702907f, 0.f, -0.702046f, 0.693781f, 0.160622f, -0.702046f, 0.693781f, -0.160622f, -0.783843f, 0.615642f, 0.0810863f, -0.783843f, 0.615642f, -0.0810863f, -0.850651f, 0.525731f, 0.f, -0.606825f, 0.758652f, 0.237086f,
		-0.606825f, 0.758652f, -0.237086f, 0.399607f, -0.912982f, -0.0823236f, 0.399607f, -0.912982f, 0.0823236f, 0.266405f, -0.963861f, 0.f, 0.262866f, -0.951057f, -0.16246f, 0.525731f, -0.850651f, 0.f, 0.262866f, -0.951057f, 0.16246f, 0.133071f, -0.987688f, -0.0822425f, 0.133071f, -0.987688f, 0.0822425f, 0.f, -1.f, 0.f,
		0.519258f, -0.840178f, -0.156434f, 0.386187f, -0.891007f, -0.238677f, 0.5f, -0.809017f, -0.309017f, 0.386187f, -0.891007f, 0.238677f, 0.519258f, -0.840178f, 0.156434f, 0.5f, -0.809017f, 0.309017f, 0.132792f, -0.966393f, 0.220117f, 0.264083f, -0.916244f, 0.301259f, 0.131655f, -0.924305f, 0.358229f, 0.f, -0.961938f, 0.273267f,
		0.259892f, -0.862668f, 0.433889f, 0.f, -0.915043f, 0.403355f, 0.1312f, -0.864929f, 0.484442f, 0.f, -0.850651f, 0.525731f, 0.f, -0.990439f, 0.137952f, 0.383614f, -0.843911f, 0.375039f, 0.264083f, -0.916244f, -0.301259f, 0.132792f, -0.966393f, -0.220117f, 0.131655f, -0.924305f, -0.358229f, 0.259892f, -0.862668f, -0.433889f,
		0.f, -0.961938f, -0.273267f, 0.1312f, -0.864929f, -0.484442f, 0.f, -0.915043f, -0.403355f, 0.f, -0.850651f, -0.525731f, 0.383614f, -0.843911f, -0.375039f, 0.f, -0.990439f, -0.137952f, 0.62024f, -0.780204f, 0.0811418f, 0.62024f, -0.780204f, -0.0811418f, 0.711282f, -0.702907f, 0.f, 0.702046f, -0.693781f, 0.160622f,
		0.702046f, -0.693781f, -0.160622f, 0.783843f, -0.615642f, 0.0810863f, 0.783843f, -0.615642f, -0.0810863f, 0.850651f, -0.525731f, 0.f, 0.606825f, -0.758652f, 0.237086f, 0.606825f, -0.758652f, -0.237086f, -0.399607f, -0.912982f, 0.0823236f, -0.399607f, -0.912982f, -0.0823236f, -0.266405f, -0.963861f, 0.f, -0.262866f, -0.951057f, 0.16246f,
		-0.525731f, -0.850651f, 0.f, -0.262866f, -0.951057f, -0.16246f, -0.133071f, -0.987688f, 0.0822425f, -0.133071f, -0.987688f, -0.0822425f, -0.519258f, -0.840178f, 0.156434f, -0.386187f, -0.891007f, 0.238677f, -0.5f, -0.809017f, 0.309017f, -0.386187f, -0.891007f, -0.238677f, -0.519258f, -0.840178f, -0.156434f, -0.5f, -0.809017f, -0.309017f,
		-0.132792f, -0.966393f, -0.220117f, -0.264083f, -0.916244f, -0.301259f, -0.131655f, -0.924305f, -0.358229f, -0.259892f, -0.862668f, -0.433889f, -0.1312f, -0.864929f, -0.484442f, -0.383614f, -0.843911f, -0.375039f, -0.264083f, -0.916244f, 0.301259f, -0.132792f, -0.966393f, 0.220117f, -0.131655f, -0.924305f, 0.358229f, -0.259892f, -0.862668f, 0.433889f,
		-0.1312f, -0.864929f, 0.484442f, -0.383614f, -0.843911f, 0.375039f, -0.62024f, -0.780204f, -0.0811418f, -0.62024f, -0.780204f, 0.0811418f, -0.711282f, -0.702907f, 0.f, -0.702046f, -0.693781f, -0.160622f, -0.702046f, -0.693781f, 0.160622f, -0.783843f, -0.615642f, -0.0810863f, -0.783843f, -0.615642f, 0.0810863f, -0.850651f, -0.525731f, 0.f,
		-0.606825f, -0.758652f, -0.237086f, -0.606825f, -0.758652f, 0.237086f, 0.912982f, -0.0823236f, -0.399607f, 0.912982f, 0.0823236f, -0.399607f, 0.963861f, 0.f, -0.266405f, 0.951057f, -0.16246f, -0.262866f, 0.850651f, 0.f, -0.525731f, 0.951057f, 0.16246f, -0.262866f, 0.987688f, -0.0822425f, -0.133071f, 0.987688f, 0.0822425f, -0.133071f,
		1.f, 0.f, 0.f, 0.840178f, -0.156434f, -0.519258f, 0.891007f, -0.238677f, -0.386187f, 0.809017f, -0.309017f, -0.5f, 0.891007f, 0.238677f, -0.386187f, 0.840178f, 0.156434f, -0.519258f, 0.809017f, 0.309017f, -0.5f, 0.966393f, 0.220117f, -0.132792f, 0.916244f, 0.301259f, -0.264083f, 0.924305f, 0.358229f, -0.131655f,
		0.961938f, 0.273267f, 0.f, 0.862668f, 0.433889f, -0.259892f, 0.915043f, 0.403355f, 0.f, 0.864929f, 0.484442f, -0.1312f, 0.990439f, 0.137952f, 0.f, 0.843911f, 0.375039f, -0.383614f, 0.916244f, -0.301259f, -0.264083f, 0.966393f, -0.220117f, -0.132792f, 0.924305f, -0.358229f, -0.131655f, 0.862668f, -0.433889f, -0.259892f,
		0.961938f, -0.273267f, 0.f, 0.864929f, -0.484442f, -0.1312f, 0.915043f, -0.403355f, 0.f, 0.843911f, -0.375039f, -0.383614f, 0.990439f, -0.137952f, 0.f, 0.780204f, 0.0811418f, -0.62024f, 0.780204f, -0.0811418f, -0.62024f, 0.702907f, 0.f, -0.711282f, 0.693781f, 0.160622f, -0.702046f, 0.693781f, -0.160622f, -0.702046f,
		0.615642f, 0.0810863f, -0.783843f, 0.615642f, -0.0810863f, -0.783843f, 0.525731f, 0.f, -0.850651f, 0.758652f, 0.237086f, -0.606825f, 0.758652f, -0.237086f, -0.606825f, 0.912982f, 0.0823236f, 0.399607f, 0.912982f, -0.0823236f, 0.399607f, 0.963861f, 0.f, 0.266405f, 0.951057f, 0.16246f, 0.262866f, 0.850651f, 0.f, 0.525731f,
		0.951057f, -0.16246f, 0.262866f, 0.987688f, 0.0822425f, 0.133071f, 0.987688f, -0.0822425f, 0.133071f, 0.840178f, 0.156434f, 0.519258f, 0.891007f, 0.238677f, 0.386187f, 0.809017f, 0.309017f, 0.5f, 0.891007f, -0.238677f, 0.386187f, 0.840178f, -0.156434f, 0.519258f, 0.809017f, -0.309017f, 0.5f, 0.966393f, -0.220117f, 0.132792f,
		0.916244f, -0.301259f, 0.264083f, 0.924305f, -0.358229f, 0.131655f, 0.862668f, -0.433889f, 0.259892f, 0.864929f, -0.484442f, 0.1312f, 0.843911f, -0.375039f, 0.383614f, 0.916244f, 0.301259f, 0.264083f, 0.966393f, 0.220117f, 0.132792f, 0.924305f, 0.358229f, 0.131655f, 0.862668f, 0.433889f, 0.259892f, 0.864929f, 0.484442f, 0.1312f,
		0.843911f, 0.375039f, 0.383614f, 0.780204f, -0.0811418f, 0.62024f, 0.780204f, 0.0811418f, 0.62024f, 0.702907f, 0.f, 0.711282f, 0.693781f, -0.160622f, 0.702046f, 0.693781f, 0.160622f, 0.702046f, 0.615642f, -0.0810863f, 0.783843f, 0.615642f, 0.0810863f, 0.783843f, 0.525731f, 0.f, 0.850651f, 0.758652f, -0.237086f, 0.606825f,
		0.758652f, 0.237086f, 0.606825f, -0.912982f, -0.0823236f, 0.399607f, -0.912982f, 0.0823236f, 0.399607f, -0.963861f, 0.f, 0.266405f, -0.951057f, -0.16246f, 0.262866f, -0.850651f, 0.f, 0.525731f, -0.951057f, 0.16246f, 0.262866f, -0.987688f, -0.0822425f, 0.133071f, -0.987688f, 0.0822425f, 0.133071f, -1.f, 0.f, 0.f,
		-0.840178f, -0.156434f, 0.519258f, -0.891007f, -0.238677f, 0.386187f, -0.809017f, -0.309017f, 0.5f, -0.891007f, 0.238677f, 0.386187f, -0.840178f, 0.156434f, 0.519258f, -0.809017f, 0.309017f, 0.5f, -0.966393f, 0.220117f, 0.132792f, -0.916244f, 0.301259f, 0.264083f, -0.924305f, 0.358229f, 0.131655f, -0.961938f, 0.273267f, 0.f,
		-0.862668f, 0.433889f, 0.259892f, -0.915043f, 0.403355f, 0.f, -0.864929f, 0.484442f, 0.1312f, -0.990439f, 0.137952f, 0.f, -0.843911f, 0.375039f, 0.383614f, -0.916244f, -0.301259f, 0.264083f, -0.966393f, -0.220117f, 0.132792f, -0.924305f, -0.358229f, 0.131655f, -0.862668f, -0.433889f, 0.259892f, -0.961938f, -0.273267f, 0.f,
		-0.864929f, -0.484442f, 0.1312f, -0.915043f, -0.403355f, 0.f, -0.843911f, -0.375039f, 0.383614f, -0.990439f, -0.137952f, 0.f, -0.780204f, 0.0811418f, 0.62024f, -0.780204f, -0.0811418f, 0.62024f, -0.702907f, 0.f, 0.711282f, -0.693781f, 0.160622f, 0.702046f, -0.693781f, -0.160622f, 0.702046f, -0.615642f, 0.0810863f, 0.783843f,
		-0.615642f, -0.0810863f, 0.783843f, -0.525731f, 0.f, 0.850651f, -0.758652f, 0.237086f, 0.606825f, -0.758652f, -0.237086f, 0.606825f, -0.912982f, 0.0823236f, -0.399607f, -0.912982f, -0.0823236f, -0.399607f, -0.963861f, 0.f, -0.266405f, -0.951057f, 0.16246f, -0.262866f, -0.850651f, 0.f, -0.525731f, -0.951057f, -0.16246f, -0.262866f,
		-0.987688f, 0.0822425f, -0.133071f, -0.987688f, -0.0822425f, -0.133071f, -0.840178f, 0.156434f, -0.519258f, -0.891007f, 0.238677f, -0.386187f, -0.809017f, 0.309017f, -0.5f, -0.891007f, -0.238677f, -0.386187f, -0.840178f, -0.156434f, -0.519258f, -0.809017f, -0.309017f, -0.5f, -0.966393f, -0.220117f, -0.132792f, -0.916244f, -0.301259f, -0.264083f,
		-0.924305f, -0.358229f, -0.131655f, -0.862668f, -0.433889f, -0.259892f, -0.864929f, -0.484442f, -0.1312f, -0.843911f, -0.375039f, -0.383614f, -0.916244f, 0.301259f, -0.264083f, -0.966393f, 0.220117f, -0.132792f, -0.924305f, 0.358229f, -0.131655f, -0.862668f, 0.433889f, -0.259892f, -0.864929f, 0.484442f, -0.1312f, -0.843911f, 0.375039f, -0.383614f,
		-0.780204f, -0.0811418f, -0.62024f, -0.780204f, 0.0811418f, -0.62024f, -0.702907f, 0.f, -0.711282f, -0.693781f, -0.160622f, -0.702046f, -0.693781f, 0.160622f, -0.702046f, -0.615642f, -0.0810863f, -0.783843f, -0.615642f, 0.0810863f, -0.783843f, -0.525731f, 0.f, -0.850651f, -0.758652f, -0.237086f, -0.606825f, -0.758652f, 0.237086f, -0.606825f,
		-0.0823236f, -0.399607f, 0.912982f, 0.0823236f, -0.399607f, 0.912982f, 0.f, -0.266405f, 0.963861f, -0.16246f, -0.262866f, 0.951057f, 0.f, -0.525731f, 0.850651f, 0.16246f, -0.262866f, 0.951057f, -0.0822425f, -0.133071f, 0.987688f, 0.0822425f, -0.133071f, 0.987688f, 0.f, 0.f, 1.f, -0.156434f, -0.519258f, 0.840178f,
		-0.238677f, -0.386187f, 0.891007f, -0.309017f, -0.5f, 0.809017f, 0.238677f, -0.386187f, 0.891007f, 0.156434f, -0.519258f, 0.840178f, 0.309017f, -0.5f, 0.809017f, 0.220117f, -0.132792f, 0.966393f, 0.301259f, -0.264083f, 0.916244f, 0.358229f, -0.131655f, 0.924305f, 0.273267f, 0.f, 0.961938f, 0.433889f, -0.259892f, 0.862668f,
		0.403355f, 0.f, 0.915043f, 0.484442f, -0.1312f, 0.864929f, 0.137952f, 0.f, 0.990439f, 0.375039f, -0.383614f, 0.843911f, -0.301259f, -0.264083f, 0.916244f, -0.220117f, -0.132792f, 0.966393f, -0.358229f, -0.131655f, 0.924305f, -0.433889f, -0.259892f, 0.862668f, -0.273267f, 0.f, 0.961938f, -0.484442f, -0.1312f, 0.864929f,
		-0.403355f, 0.f, 0.915043f, -0.375039f, -0.383614f, 0.843911f, -0.137952f, 0.f, 0.990439f, 0.0811418f, -0.62024f, 0.780204f, -0.0811418f, -0.62024f, 0.780204f, 0.f, -0.711282f, 0.702907f, 0.160622f, -0.702046f, 0.693781f, -0.160622f, -0.702046f, 0.693781f, 0.0810863f, -0.783843f, 0.615642f, -0.0810863f, -0.783843f, 0.615642f,
		0.237086f, -0.606825f, 0.758652f, -0.237086f, -0.606825f, 0.758652f, 0.0823236f, 0.399607f, 0.912982f, -0.0823236f, 0.399607f, 0.912982f, 0.f, 0.266405f, 0.963861f, 0.16246f, 0.262866f, 0.951057f, 0.f, 0.525731f, 0.850651f, -0.16246f, 0.262866f, 0.951057f, 0.0822425f, 0.133071f, 0.987688f, -0.0822425f, 0.133071f, 0.987688f,
		0.156434f, 0.519258f, 0.840178f, 0.238677f, 0.386187f, 0.891007f, 0.309017f, 0.5f, 0.809017f, -0.238677f, 0.386187f, 0.891007f, -0.156434f, 0.519258f, 0.840178f, -0.309017f, 0.5f, 0.809017f, -0.220117f, 0.132792f, 0.966393f, -0.301259f, 0.264083f, 0.916244f, -0.358229f, 0.131655f, 0.924305f, -0.433889f, 0.259892f, 0.862668f,
		-0.484442f, 0.1312f, 0.864929f, -0.375039f, 0.383614f, 0.843911f, 0.301259f, 0.264083f, 0.916244f, 0.220117f, 0.132792f, 0.966393f, 0.358229f, 0.131655f, 0.924305f, 0.433889f, 0.259892f, 0.862668f, 0.484442f, 0.1312f, 0.864929f, 0.375039f, 0.383614f, 0.843911f, -0.0811418f, 0.62024f, 0.780204f, 0.0811418f, 0.62024f, 0.780204f,
		0.f, 0.711282f, 0.702907f, -0.160622f, 0.702046f, 0.693781f, 0.160622f, 0.702046f, 0.693781f, -0.0810863f, 0.783843f, 0.615642f, 0.0810863f, 0.783843f, 0.615642f, -0.237086f, 0.606825f, 0.758652f, 0.237086f, 0.606825f, 0.758652f, -0.0823236f, 0.399607f, -0.912982f, 0.0823236f, 0.399607f, -0.912982f, 0.f, 0.266405f, -0.963861f,
		-0.16246f, 0.262866f, -0.951057f, 0.f, 0.525731f, -0.850651f, 0.16246f, 0.262866f, -0.951057f, -0.0822425f, 0.133071f, -0.987688f, 0.0822425f, 0.133071f, -0.987688f, 0.f, 0.f, -1.f, -0.156434f, 0.519258f, -0.840178f, -0.238677f, 0.386187f, -0.891007f, -0.309017f, 0.5f, -0.809017f, 0.238677f, 0.386187f, -0.891007f,
		0.156434f, 0.519258f, -0.840178f, 0.309017f, 0.5f, -0.809017f, 0.220117f, 0.132792f, -0.966393f, 0.301259f, 0.264083f, -0.916244f, 0.358229f, 0.131655f, -0.924305f, 0.273267f, 0.f, -0.961938f, 0.433889f, 0.259892f, -0.862668f, 0.403355f, 0.f, -0.915043f, 0.484442f, 0.1312f, -0.864929f, 0.137952f, 0.f, -0.990439f,
		0.375039f, 0.383614f, -0.843911f, -0.301259f, 0.264083f, -0.916244f, -0.220117f, 0.132792f, -0.966393f, -0.358229f, 0.131655f, -0.924305f, -0.433889f, 0.259892f, -0.862668f, -0.273267f, 0.f, -0.961938f, -0.484442f, 0.1312f, -0.864929f, -0.403355f, 0.f, -0.915043f, -0.375039f, 0.383614f, -0.843911f, -0.137952f, 0.f, -0.990439f,
		0.0811418f, 0.62024f, -0.780204f, -0.0811418f, 0.62024f, -0.780204f, 0.f, 0.711282f, -0.702907f, 0.160622f, 0.702046f, -0.693781f, -0.160622f, 0.702046f, -0.693781f, 0.0810863f, 0.783843f, -0.615642f, -0.0810863f, 0.783843f, -0.615642f, 0.237086f, 0.606825f, -0.758652f, -0.237086f, 0.606825f, -0.758652f, 0.0823236f, -0.399607f, -0.912982f,
		-0.0823236f, -0.399607f, -0.912982f, 0.f, -0.266405f, -0.963861f, 0.16246f, -0.262866f, -0.951057f, 0.f, -0.525731f, -0.850651f, -0.16246f, -0.262866f, -0.951057f, 0.0822425f, -0.133071f, -0.987688f, -0.0822425f, -0.133071f, -0.987688f, 0.156434f, -0.519258f, -0.840178f, 0.238677f, -0.386187f, -0.891007f, 0.309017f, -0.5f, -0.809017f,
		-0.238677f, -0.386187f, -0.891007f, -0.156434f, -0.519258f, -0.840178f, -0.309017f, -0.5f, -0.809017f, -0.220117f, -0.132792f, -0.966393f, -0.301259f, -0.264083f, -0.916244f, -0.358229f, -0.131655f, -0.924305f, -0.433889f, -0.259892f, -0.862668f, -0.484442f, -0.1312f, -0.864929f, -0.375039f, -0.383614f, -0.843911f, 0.301259f, -0.264083f, -0.916244f,
		0.220117f, -0.132792f, -0.966393f, 0.358229f, -0.131655f, -0.924305f, 0.433889f, -0.259892f, -0.862668f, 0.484442f, -0.1312f, -0.864929f, 0.375039f, -0.383614f, -0.843911f, -0.0811418f, -0.62024f, -0.780204f, 0.0811418f, -0.62024f, -0.780204f, 0.f, -0.711282f, -0.702907f, -0.160622f, -0.702046f, -0.693781f, 0.160622f, -0.702046f, -0.693781f,
		-0.0810863f, -0.783843f, -0.615642f, 0.0810863f, -0.783843f, -0.615642f, -0.237086f, -0.606825f, -0.758652f, 0.237086f, -0.606825f, -0.758652f, 0.646578f, 0.513375f, 0.564254f, 0.564254f, 0.646578f, 0.513375f, 0.513375f, 0.564254f, 0.646578f, 0.587785f, 0.425325f, 0.688191f, 0.688191f, 0.587785f, 0.425325f, 0.425325f, 0.688191f, 0.587785f,
		0.453991f, 0.46843f, 0.757935f, 0.371748f, 0.601501f, 0.707107f, 0.757935f, 0.453991f, 0.46843f, 0.707107f, 0.371748f, 0.601501f, 0.46843f, 0.757935f, 0.453991f, 0.601501f, 0.707107f, 0.371748f, 0.296005f, 0.70231f, 0.647412f, 0.346153f, 0.783452f, 0.516122f, 0.213023f, 0.792649f, 0.571252f, 0.647412f, 0.296005f, 0.70231f,
		0.516122f, 0.346153f, 0.783452f, 0.571252f, 0.213023f, 0.792649f, 0.70231f, 0.647412f, 0.296005f, 0.783452f, 0.516122f, 0.346153f, 0.792649f, 0.571252f, 0.213023f, -0.646578f, 0.513375f, 0.564254f, -0.513375f, 0.564254f, 0.646578f, -0.564254f, 0.646578f, 0.513375f, -0.688191f, 0.587785f, 0.425325f, -0.587785f, 0.425325f, 0.688191f,
		-0.425325f, 0.688191f, 0.587785f, -0.601501f, 0.707107f, 0.371748f, -0.46843f, 0.757935f, 0.453991f, -0.707107f, 0.371748f, 0.601501f, -0.757935f, 0.453991f, 0.46843f, -0.371748f, 0.601501f, 0.707107f, -0.453991f, 0.46843f, 0.757935f, -0.346153f, 0.783452f, 0.516122f, -0.296005f, 0.70231f, 0.647412f, -0.213023f, 0.792649f, 0.571252f,
		-0.783452f, 0.516122f, 0.346153f, -0.70231f, 0.647412f, 0.296005f, -0.792649f, 0.571252f, 0.213023f, -0.516122f, 0.346153f, 0.783452f, -0.647412f, 0.296005f, 0.70231f, -0.571252f, 0.213023f, 0.792649f, 0.646578f, 0.513375f, -0.564254f, 0.513375f, 0.564254f, -0.646578f, 0.564254f, 0.646578f, -0.513375f, 0.688191f, 0.587785f, -0.425325f,
		0.587785f, 0.425325f, -0.688191f, 0.425325f, 0.688191f, -0.587785f, 0.601501f, 0.707107f, -0.371748f, 0.46843f, 0.757935f, -0.453991f, 0.707107f, 0.371748f, -0.601501f, 0.757935f, 0.453991f, -0.46843f, 0.371748f, 0.601501f, -0.707107f, 0.453991f, 0.46843f, -0.757935f, 0.346153f, 0.783452f, -0.516122f, 0.296005f, 0.70231f, -0.647412f,
		0.213023f, 0.792649f, -0.571252f, 0.783452f, 0.516122f, -0.346153f, 0.70231f, 0.647412f, -0.296005f, 0.792649f, 0.571252f, -0.213023f, 0.516122f, 0.346153f, -0.783452f, 0.647412f, 0.296005f, -0.70231f, 0.571252f, 0.213023f, -0.792649f, -0.646578f, 0.513375f, -0.564254f, -0.564254f, 0.646578f, -0.513375f, -0.513375f, 0.564254f, -0.646578f,
		-0.587785f, 0.425325f, -0.688191f, -0.688191f, 0.587785f, -0.425325f, -0.425325f, 0.688191f, -0.587785f, -0.453991f, 0.46843f, -0.757935f, -0.371748f, 0.601501f, -0.707107f, -0.757935f, 0.453991f, -0.46843f, -0.707107f, 0.371748f, -0.601501f, -0.46843f, 0.757935f, -0.453991f, -0.601501f, 0.707107f, -0.371748f, -0.296005f, 0.70231f, -0.647412f,
		-0.346153f, 0.783452f, -0.516122f, -0.213023f, 0.792649f, -0.571252f, -0.647412f, 0.296005f, -0.70231f, -0.516122f, 0.346153f, -0.783452f, -0.571252f, 0.213023f, -0.792649f, -0.70231f, 0.647412f, -0.296005f, -0.783452f, 0.516122f, -0.346153f, -0.792649f, 0.571252f, -0.213023f, 0.646578f, -0.513375f, 0.564254f, 0.513375f, -0.564254f, 0.646578f,
		0.564254f, -0.646578f, 0.513375f, 0.688191f, -0.587785f, 0.425325f, 0.587785f, -0.425325f, 0.688191f, 0.425325f, -0.688191f, 0.587785f, 0.601501f, -0.707107f, 0.371748f, 0.46843f, -0.757935f, 0.453991f, 0.707107f, -0.371748f, 0.601501f, 0.757935f, -0.453991f, 0.46843f, 0.371748f, -0.601501f, 0.707107f, 0.453991f, -0.46843f, 0.757935f,
		0.346153f, -0.783452f, 0.516122f, 0.296005f, -0.70231f, 0.647412f, 0.213023f, -0.792649f, 0.571252f, 0.783452f, -0.516122f, 0.346153f, 0.70231f, -0.647412f, 0.296005f, 0.792649f, -0.571252f, 0.213023f, 0.516122f, -0.346153f, 0.783452f, 0.647412f, -0.296005f, 0.70231f, 0.571252f, -0.213023f, 0.792649f, -0.646578f, -0.513375f, 0.564254f,
		-0.564254f, -0.646578f, 0.513375f, -0.513375f, -0.564254f, 0.646578f, -0.587785f, -0.425325f, 0.688191f, -0.688191f, -0.587785f, 0.425325f, -0.425325f, -0.688191f, 0.587785f, -0.453991f, -0.46843f, 0.757935f, -0.371748f, -0.601501f, 0.707107f, -0.757935f, -0.453991f, 0.46843f, -0.707107f, -0.371748f, 0.601501f, -0.46843f, -0.757935f, 0.453991f,
		-0.601501f, -0.707107f, 0.371748f, -0.296005f, -0.70231f, 0.647412f, -0.346153f, -0.783452f, 0.516122f, -0.213023f, -0.792649f, 0.571252f, -0.647412f, -0.296005f, 0.70231f, -0.516122f, -0.346153f, 0.783452f, -0.571252f, -0.213023f, 0.792649f, -0.70231f, -0.647412f, 0.296005f, -0.783452f, -0.516122f, 0.346153f, -0.792649f, -0.571252f, 0.213023f,
		0.646578f, -0.513375f, -0.564254f, 0.564254f, -0.646578f, -0.513375f, 0.513375f, -0.564254f, -0.646578f, 0.587785f, -0.425325f, -0.688191f, 0.688191f, -0.587785f, -0.425325f, 0.425325f, -0.688191f, -0.587785f, 0.453991f, -0.46843f, -0.757935f, 0.371748f, -0.601501f, -0.707107f, 0.757935f, -0.453991f, -0.46843f, 0.707107f, -0.371748f, -0.601501f,
		0.46843f, -0.757935f, -0.453991f, 0.601501f, -0.707107f, -0.371748f, 0.296005f, -0.70231f, -0.647412f, 0.346153f, -0.783452f, -0.516122f, 0.213023f, -0.792649f, -0.571252f, 0.647412f, -0.296005f, -0.70231f, 0.516122f, -0.346153f, -0.783452f, 0.571252f, -0.213023f, -0.792649f, 0.70231f, -0.647412f, -0.296005f, 0.783452f, -0.516122f, -0.346153f,
		0.792649f, -0.571252f, -0.213023f, -0.646578f, -0.513375f, -0.564254f, -0.513375f, -0.564254f, -0.646578f, -0.564254f, -0.646578f, -0.513375f, -0.688191f, -0.587785f, -0.425325f, -0.587785f, -0.425325f, -0.688191f, -0.425325f, -0.688191f, -0.587785f, -0.601501f, -0.707107f, -0.371748f, -0.46843f, -0.757935f, -0.453991f, -0.707107f, -0.371748f, -0.601501f,
		-0.757935f, -0.453991f, -0.46843f, -0.371748f, -0.601501f, -0.707107f, -0.453991f, -0.46843f, -0.757935f, -0.346153f, -0.783452f, -0.516122f, -0.296005f, -0.70231f, -0.647412f, -0.213023f, -0.792649f, -0.571252f, -0.783452f, -0.516122f, -0.346153f, -0.70231f, -0.647412f, -0.296005f, -0.792649f, -0.571252f, -0.213023f, -0.516122f, -0.346153f, -0.783452f,
		-0.647412f, -0.296005f, -0.70231f, -0.571252f, -0.213023f, -0.792649f 
		 };

		 for (unsigned int i = 0; i < s.positions.size()/3; ++i) {
			 glm::vec3 p(s.positions[i * 3], s.positions[i * 3 + 1], s.positions[i * 3 + 2]);
			 p = glm::normalize(p);
			 s.normals.push_back(p.x);
			 s.normals.push_back(p.y);
			 s.normals.push_back(p.z);
		 }

		 s.indices = {
			 0, 1, 2, 3, 0, 2, 4, 1, 0, 5, 2, 1, 6, 2, 7, 8, 6, 7, 3, 2, 6, 5, 7, 2, 9, 0, 10, 11, 9, 10,
		4, 0, 9, 3, 10, 0, 12, 1, 13, 14, 12, 13, 5, 1, 12, 4, 13, 1, 15, 16, 17, 18, 15, 17, 5, 16, 15, 19, 17, 16,
		20, 17, 21, 22, 20, 21, 18, 17, 20, 19, 21, 17, 7, 15, 23, 8, 7, 23, 5, 15, 7, 18, 23, 15, 24, 16, 12, 14, 24, 12,
		19, 16, 24, 5, 12, 16, 25, 26, 27, 28, 25, 27, 3, 26, 25, 29, 27, 26, 30, 27, 31, 32, 30, 31, 28, 27, 30, 29, 31, 27,
		10, 25, 33, 11, 10, 33, 3, 25, 10, 28, 33, 25, 34, 26, 6, 8, 34, 6, 29, 26, 34, 3, 6, 26, 35, 36, 37, 38, 35, 37,
		4, 36, 35, 39, 37, 36, 40, 37, 41, 42, 40, 41, 38, 37, 40, 39, 41, 37, 13, 35, 43, 14, 13, 43, 4, 35, 13, 38, 43, 35,
		44, 36, 9, 11, 44, 9, 39, 36, 44, 4, 9, 36, 45, 46, 47, 48, 45, 47, 49, 46, 45, 50, 47, 46, 51, 47, 52, 8, 51, 52,
		48, 47, 51, 50, 52, 47, 53, 45, 54, 55, 53, 54, 49, 45, 53, 48, 54, 45, 56, 46, 57, 58, 56, 57, 50, 46, 56, 49, 57, 46,
		59, 60, 61, 29, 59, 61, 50, 60, 59, 62, 61, 60, 31, 61, 63, 32, 31, 63, 29, 61, 31, 62, 63, 61, 52, 59, 34, 8, 52, 34,
		50, 59, 52, 29, 34, 59, 64, 60, 56, 58, 64, 56, 62, 60, 64, 50, 56, 60, 65, 66, 67, 68, 65, 67, 48, 66, 65, 18, 67, 66,
		69, 67, 20, 22, 69, 20, 68, 67, 69, 18, 20, 67, 54, 65, 70, 55, 54, 70, 48, 65, 54, 68, 70, 65, 23, 66, 51, 8, 23, 51,
		18, 66, 23, 48, 51, 66, 71, 72, 73, 74, 71, 73, 49, 72, 71, 75, 73, 72, 76, 73, 77, 78, 76, 77, 74, 73, 76, 75, 77, 73,
		57, 71, 79, 58, 57, 79, 49, 71, 57, 74, 79, 71, 80, 72, 53, 55, 80, 53, 75, 72, 80, 49, 53, 72, 81, 82, 83, 84, 81, 83,
		85, 82, 81, 86, 83, 82, 87, 83, 88, 89, 87, 88, 84, 83, 87, 86, 88, 83, 90, 81, 91, 92, 90, 91, 85, 81, 90, 84, 91, 81,
		93, 82, 94, 95, 93, 94, 86, 82, 93, 85, 94, 82, 96, 97, 98, 99, 96, 98, 86, 97, 96, 100, 98, 97, 101, 98, 102, 103, 101, 102,
		99, 98, 101, 100, 102, 98, 88, 96, 104, 89, 88, 104, 86, 96, 88, 99, 104, 96, 105, 97, 93, 95, 105, 93, 100, 97, 105, 86, 93, 97,
		106, 107, 108, 109, 106, 108, 84, 107, 106, 110, 108, 107, 111, 108, 112, 113, 111, 112, 109, 108, 111, 110, 112, 108, 91, 106, 114, 92, 91, 114,
		84, 106, 91, 109, 114, 106, 115, 107, 87, 89, 115, 87, 110, 107, 115, 84, 87, 107, 116, 117, 118, 119, 116, 118, 85, 117, 116, 120, 118, 117,
		121, 118, 122, 123, 121, 122, 119, 118, 121, 120, 122, 118, 94, 116, 124, 95, 94, 124, 85, 116, 94, 119, 124, 116, 125, 117, 90, 92, 125, 90,
		120, 117, 125, 85, 90, 117, 126, 127, 128, 129, 126, 128, 130, 127, 126, 131, 128, 127, 132, 128, 133, 89, 132, 133, 129, 128, 132, 131, 133, 128,
		134, 126, 135, 136, 134, 135, 130, 126, 134, 129, 135, 126, 137, 127, 138, 139, 137, 138, 131, 127, 137, 130, 138, 127, 140, 141, 142, 110, 140, 142,
		131, 141, 140, 143, 142, 141, 112, 142, 144, 113, 112, 144, 110, 142, 112, 143, 144, 142, 133, 140, 115, 89, 133, 115, 131, 140, 133, 110, 115, 140,
		145, 141, 137, 139, 145, 137, 143, 141, 145, 131, 137, 141, 146, 147, 148, 149, 146, 148, 129, 147, 146, 99, 148, 147, 150, 148, 101, 103, 150, 101,
		149, 148, 150, 99, 101, 148, 135, 146, 151, 136, 135, 151, 129, 146, 135, 149, 151, 146, 104, 147, 132, 89, 104, 132, 99, 147, 104, 129, 132, 147,
		152, 153, 154, 155, 152, 154, 130, 153, 152, 156, 154, 153, 157, 154, 158, 159, 157, 158, 155, 154, 157, 156, 158, 154, 138, 152, 160, 139, 138, 160,
		130, 152, 138, 155, 160, 152, 161, 153, 134, 136, 161, 134, 156, 153, 161, 130, 134, 153, 162, 163, 164, 165, 162, 164, 166, 163, 162, 167, 164, 163,
		168, 164, 169, 170, 168, 169, 165, 164, 168, 167, 169, 164, 171, 162, 172, 173, 171, 172, 166, 162, 171, 165, 172, 162, 174, 163, 175, 176, 174, 175,
		167, 163, 174, 166, 175, 163, 177, 178, 179, 180, 177, 179, 167, 178, 177, 181, 179, 178, 182, 179, 183, 42, 182, 183, 180, 179, 182, 181, 183, 179,
		169, 177, 184, 170, 169, 184, 167, 177, 169, 180, 184, 177, 185, 178, 174, 176, 185, 174, 181, 178, 185, 167, 174, 178, 186, 187, 188, 189, 186, 188,
		165, 187, 186, 190, 188, 187, 191, 188, 192, 123, 191, 192, 189, 188, 191, 190, 192, 188, 172, 186, 193, 173, 172, 193, 165, 186, 172, 189, 193, 186,
		194, 187, 168, 170, 194, 168, 190, 187, 194, 165, 168, 187, 195, 196, 197, 198, 195, 197, 166, 196, 195, 199, 197, 196, 200, 197, 201, 202, 200, 201,
		198, 197, 200, 199, 201, 197, 175, 195, 203, 176, 175, 203, 166, 195, 175, 198, 203, 195, 204, 196, 171, 173, 204, 171, 199, 196, 204, 166, 171, 196,
		205, 206, 207, 208, 205, 207, 209, 206, 205, 210, 207, 206, 211, 207, 212, 170, 211, 212, 208, 207, 211, 210, 212, 207, 213, 205, 214, 215, 213, 214,
		209, 205, 213, 208, 214, 205, 216, 206, 217, 218, 216, 217, 210, 206, 216, 209, 217, 206, 219, 220, 221, 190, 219, 221, 210, 220, 219, 222, 221, 220,
		192, 221, 223, 123, 192, 223, 190, 221, 192, 222, 223, 221, 212, 219, 194, 170, 212, 194, 210, 219, 212, 190, 194, 219, 224, 220, 216, 218, 224, 216,
		222, 220, 224, 210, 216, 220, 225, 226, 227, 228, 225, 227, 208, 226, 225, 180, 227, 226, 229, 227, 182, 42, 229, 182, 228, 227, 229, 180, 182, 227,
		214, 225, 230, 215, 214, 230, 208, 225, 214, 228, 230, 225, 184, 226, 211, 170, 184, 211, 180, 226, 184, 208, 211, 226, 231, 232, 233, 234, 231, 233,
		209, 232, 231, 235, 233, 232, 236, 233, 237, 238, 236, 237, 234, 233, 236, 235, 237, 233, 217, 231, 239, 218, 217, 239, 209, 231, 217, 234, 239, 231,
		240, 232, 213, 215, 240, 213, 235, 232, 240, 209, 213, 232, 241, 242, 243, 244, 241, 243, 245, 242, 241, 246, 243, 242, 247, 243, 248, 249, 247, 248,
		244, 243, 247, 246, 248, 243, 250, 241, 251, 252, 250, 251, 245, 241, 250, 244, 251, 241, 253, 242, 254, 255, 253, 254, 246, 242, 253, 245, 254, 242,
		256, 257, 258, 259, 256, 258, 246, 257, 256, 260, 258, 257, 261, 258, 262, 78, 261, 262, 259, 258, 261, 260, 262, 258, 248, 256, 263, 249, 248, 263,
		246, 256, 248, 259, 263, 256, 264, 257, 253, 255, 264, 253, 260, 257, 264, 246, 253, 257, 265, 266, 267, 268, 265, 267, 244, 266, 265, 269, 267, 266,
		270, 267, 271, 159, 270, 271, 268, 267, 270, 269, 271, 267, 251, 265, 272, 252, 251, 272, 244, 265, 251, 268, 272, 265, 273, 266, 247, 249, 273, 247,
		269, 266, 273, 244, 247, 266, 274, 275, 276, 277, 274, 276, 245, 275, 274, 278, 276, 275, 279, 276, 280, 281, 279, 280, 277, 276, 279, 278, 280, 276,
		254, 274, 282, 255, 254, 282, 245, 274, 254, 277, 282, 274, 283, 275, 250, 252, 283, 250, 278, 275, 283, 245, 250, 275, 284, 285, 286, 287, 284, 286,
		288, 285, 284, 289, 286, 285, 290, 286, 291, 249, 290, 291, 287, 286, 290, 289, 291, 286, 292, 284, 293, 294, 292, 293, 288, 284, 292, 287, 293, 284,
		295, 285, 296, 297, 295, 296, 289, 285, 295, 288, 296, 285, 298, 299, 300, 269, 298, 300, 289, 299, 298, 301, 300, 299, 271, 300, 302, 159, 271, 302,
		269, 300, 271, 301, 302, 300, 291, 298, 273, 249, 291, 273, 289, 298, 291, 269, 273, 298, 303, 299, 295, 297, 303, 295, 301, 299, 303, 289, 295, 299,
		304, 305, 306, 307, 304, 306, 287, 305, 304, 259, 306, 305, 308, 306, 261, 78, 308, 261, 307, 306, 308, 259, 261, 306, 293, 304, 309, 294, 293, 309,
		287, 304, 293, 307, 309, 304, 263, 305, 290, 249, 263, 290, 259, 305, 263, 287, 290, 305, 310, 311, 312, 313, 310, 312, 288, 311, 310, 314, 312, 311,
		315, 312, 316, 317, 315, 316, 313, 312, 315, 314, 316, 312, 296, 310, 318, 297, 296, 318, 288, 310, 296, 313, 318, 310, 319, 311, 292, 294, 319, 292,
		314, 311, 319, 288, 292, 311, 320, 321, 322, 323, 320, 322, 324, 321, 320, 325, 322, 321, 326, 322, 327, 328, 326, 327, 323, 322, 326, 325, 327, 322,
		329, 320, 330, 331, 329, 330, 324, 320, 329, 323, 330, 320, 332, 321, 333, 334, 332, 333, 325, 321, 332, 324, 333, 321, 335, 336, 337, 338, 335, 337,
		325, 336, 335, 339, 337, 336, 340, 337, 341, 238, 340, 341, 338, 337, 340, 339, 341, 337, 327, 335, 342, 328, 327, 342, 325, 335, 327, 338, 342, 335,
		343, 336, 332, 334, 343, 332, 339, 336, 343, 325, 332, 336, 344, 345, 346, 347, 344, 346, 323, 345, 344, 348, 346, 345, 349, 346, 350, 281, 349, 350,
		347, 346, 349, 348, 350, 346, 330, 344, 351, 331, 330, 351, 323, 344, 330, 347, 351, 344, 352, 345, 326, 328, 352, 326, 348, 345, 352, 323, 326, 345,
		353, 354, 355, 356, 353, 355, 324, 354, 353, 357, 355, 354, 358, 355, 359, 103, 358, 359, 356, 355, 358, 357, 359, 355, 333, 353, 360, 334, 333, 360,
		324, 353, 333, 356, 360, 353, 361, 354, 329, 331, 361, 329, 357, 354, 361, 324, 329, 354, 362, 363, 364, 365, 362, 364, 366, 363, 362, 367, 364, 363,
		368, 364, 369, 328, 368, 369, 365, 364, 368, 367, 369, 364, 370, 362, 371, 372, 370, 371, 366, 362, 370, 365, 371, 362, 373, 363, 374, 375, 373, 374,
		367, 363, 373, 366, 374, 363, 376, 377, 378, 348, 376, 378, 367, 377, 376, 379, 378, 377, 350, 378, 380, 281, 350, 380, 348, 378, 350, 379, 380, 378,
		369, 376, 352, 328, 369, 352, 367, 376, 369, 348, 352, 376, 381, 377, 373, 375, 381, 373, 379, 377, 381, 367, 373, 377, 382, 383, 384, 385, 382, 384,
		365, 383, 382, 338, 384, 383, 386, 384, 340, 238, 386, 340, 385, 384, 386, 338, 340, 384, 371, 382, 387, 372, 371, 387, 365, 382, 371, 385, 387, 382,
		342, 383, 368, 328, 342, 368, 338, 383, 342, 365, 368, 383, 388, 389, 390, 391, 388, 390, 366, 389, 388, 392, 390, 389, 393, 390, 394, 32, 393, 394,
		391, 390, 393, 392, 394, 390, 374, 388, 395, 375, 374, 395, 366, 388, 374, 391, 395, 388, 396, 389, 370, 372, 396, 370, 392, 389, 396, 366, 370, 389,
		397, 398, 399, 400, 397, 399, 401, 398, 397, 402, 399, 398, 403, 399, 404, 405, 403, 404, 400, 399, 403, 402, 404, 399, 406, 397, 407, 408, 406, 407,
		401, 397, 406, 400, 407, 397, 409, 398, 410, 411, 409, 410, 402, 398, 409, 401, 410, 398, 412, 413, 414, 415, 412, 414, 402, 413, 412, 416, 414, 413,
		417, 414, 418, 202, 417, 418, 415, 414, 417, 416, 418, 414, 404, 412, 419, 405, 404, 419, 402, 412, 404, 415, 419, 412, 420, 413, 409, 411, 420, 409,
		416, 413, 420, 402, 409, 413, 421, 422, 423, 424, 421, 423, 400, 422, 421, 425, 423, 422, 426, 423, 427, 317, 426, 427, 424, 423, 426, 425, 427, 423,
		407, 421, 428, 408, 407, 428, 400, 421, 407, 424, 428, 421, 429, 422, 403, 405, 429, 403, 425, 422, 429, 400, 403, 422, 430, 431, 432, 433, 430, 432,
		401, 431, 430, 434, 432, 431, 435, 432, 436, 22, 435, 436, 433, 432, 435, 434, 436, 432, 410, 430, 437, 411, 410, 437, 401, 430, 410, 433, 437, 430,
		438, 431, 406, 408, 438, 406, 434, 431, 438, 401, 406, 431, 439, 440, 441, 442, 439, 441, 443, 440, 439, 444, 441, 440, 445, 441, 446, 405, 445, 446,
		442, 441, 445, 444, 446, 441, 447, 439, 448, 449, 447, 448, 443, 439, 447, 442, 448, 439, 450, 440, 451, 452, 450, 451, 444, 440, 450, 443, 451, 440,
		453, 454, 455, 425, 453, 455, 444, 454, 453, 456, 455, 454, 427, 455, 457, 317, 427, 457, 425, 455, 427, 456, 457, 455, 446, 453, 429, 405, 446, 429,
		444, 453, 446, 425, 429, 453, 458, 454, 450, 452, 458, 450, 456, 454, 458, 444, 450, 454, 459, 460, 461, 462, 459, 461, 442, 460, 459, 415, 461, 460,
		463, 461, 417, 202, 463, 417, 462, 461, 463, 415, 417, 461, 448, 459, 464, 449, 448, 464, 442, 459, 448, 462, 464, 459, 419, 460, 445, 405, 419, 445,
		415, 460, 419, 442, 445, 460, 465, 466, 467, 468, 465, 467, 443, 466, 465, 469, 467, 466, 470, 467, 471, 113, 470, 471, 468, 467, 470, 469, 471, 467,
		451, 465, 472, 452, 451, 472, 443, 465, 451, 468, 472, 465, 473, 466, 447, 449, 473, 447, 469, 466, 473, 443, 447, 466, 474, 475, 476, 477, 474, 476,
		478, 475, 474, 479, 476, 475, 480, 476, 481, 372, 480, 481, 477, 476, 480, 479, 481, 476, 482, 474, 483, 215, 482, 483, 478, 474, 482, 477, 483, 474,
		484, 475, 485, 11, 484, 485, 479, 475, 484, 478, 485, 475, 486, 487, 488, 392, 486, 488, 479, 487, 486, 28, 488, 487, 394, 488, 30, 32, 394, 30,
		392, 488, 394, 28, 30, 488, 481, 486, 396, 372, 481, 396, 479, 486, 481, 392, 396, 486, 33, 487, 484, 11, 33, 484, 28, 487, 33, 479, 484, 487,
		489, 490, 491, 235, 489, 491, 477, 490, 489, 385, 491, 490, 237, 491, 386, 238, 237, 386, 235, 491, 237, 385, 386, 491, 483, 489, 240, 215, 483, 240,
		477, 489, 483, 235, 240, 489, 387, 490, 480, 372, 387, 480, 385, 490, 387, 477, 480, 490, 492, 493, 494, 39, 492, 494, 478, 493, 492, 228, 494, 493,
		41, 494, 229, 42, 41, 229, 39, 494, 41, 228, 229, 494, 485, 492, 44, 11, 485, 44, 478, 492, 485, 39, 44, 492, 230, 493, 482, 215, 230, 482,
		228, 493, 230, 478, 482, 493, 495, 496, 497, 498, 495, 497, 499, 496, 495, 500, 497, 496, 501, 497, 502, 58, 501, 502, 498, 497, 501, 500, 502, 497,
		503, 495, 504, 255, 503, 504, 499, 495, 503, 498, 504, 495, 505, 496, 506, 375, 505, 506, 500, 496, 505, 499, 506, 496, 507, 508, 509, 62, 507, 509,
		500, 508, 507, 391, 509, 508, 63, 509, 393, 32, 63, 393, 62, 509, 63, 391, 393, 509, 502, 507, 64, 58, 502, 64, 500, 507, 502, 62, 64, 507,
		395, 508, 505, 375, 395, 505, 391, 508, 395, 500, 505, 508, 510, 511, 512, 260, 510, 512, 498, 511, 510, 74, 512, 511, 262, 512, 76, 78, 262, 76,
		260, 512, 262, 74, 76, 512, 504, 510, 264, 255, 504, 264, 498, 510, 504, 260, 264, 510, 79, 511, 501, 58, 79, 501, 74, 511, 79, 498, 501, 511,
		513, 514, 515, 379, 513, 515, 499, 514, 513, 277, 515, 514, 380, 515, 279, 281, 380, 279, 379, 515, 380, 277, 279, 515, 506, 513, 381, 375, 506, 381,
		499, 513, 506, 379, 381, 513, 282, 514, 503, 255, 282, 503, 277, 514, 282, 499, 503, 514, 516, 517, 518, 519, 516, 518, 520, 517, 516, 521, 518, 517,
		522, 518, 523, 14, 522, 523, 519, 518, 522, 521, 523, 518, 524, 516, 525, 176, 524, 525, 520, 516, 524, 519, 525, 516, 526, 517, 527, 411, 526, 527,
		521, 517, 526, 520, 527, 517, 528, 529, 530, 19, 528, 530, 521, 529, 528, 433, 530, 529, 21, 530, 435, 22, 21, 435, 19, 530, 21, 433, 435, 530,
		523, 528, 24, 14, 523, 24, 521, 528, 523, 19, 24, 528, 437, 529, 526, 411, 437, 526, 433, 529, 437, 521, 526, 529, 531, 532, 533, 181, 531, 533,
		519, 532, 531, 38, 533, 532, 183, 533, 40, 42, 183, 40, 181, 533, 183, 38, 40, 533, 525, 531, 185, 176, 525, 185, 519, 531, 525, 181, 185, 531,
		43, 532, 522, 14, 43, 522, 38, 532, 43, 519, 522, 532, 534, 535, 536, 416, 534, 536, 520, 535, 534, 198, 536, 535, 418, 536, 200, 202, 418, 200,
		416, 536, 418, 198, 200, 536, 527, 534, 420, 411, 527, 420, 520, 534, 527, 416, 420, 534, 203, 535, 524, 176, 203, 524, 198, 535, 203, 520, 524, 535,
		537, 538, 539, 540, 537, 539, 541, 538, 537, 542, 539, 538, 543, 539, 544, 408, 543, 544, 540, 539, 543, 542, 544, 539, 545, 537, 546, 294, 545, 546,
		541, 537, 545, 540, 546, 537, 547, 538, 548, 55, 547, 548, 542, 538, 547, 541, 548, 538, 549, 550, 551, 434, 549, 551, 542, 550, 549, 68, 551, 550,
		436, 551, 69, 22, 436, 69, 434, 551, 436, 68, 69, 551, 544, 549, 438, 408, 544, 438, 542, 549, 544, 434, 438, 549, 70, 550, 547, 55, 70, 547,
		68, 550, 70, 542, 547, 550, 552, 553, 554, 314, 552, 554, 540, 553, 552, 424, 554, 553, 316, 554, 426, 317, 316, 426, 314, 554, 316, 424, 426, 554,
		546, 552, 319, 294, 546, 319, 540, 552, 546, 314, 319, 552, 428, 553, 543, 408, 428, 543, 424, 553, 428, 540, 543, 553, 555, 556, 557, 75, 555, 557,
		541, 556, 555, 307, 557, 556, 77, 557, 308, 78, 77, 308, 75, 557, 77, 307, 308, 557, 548, 555, 80, 55, 548, 80, 541, 555, 548, 75, 80, 555,
		309, 556, 545, 294, 309, 545, 307, 556, 309, 541, 545, 556, 558, 559, 560, 561, 558, 560, 562, 559, 558, 563, 560, 559, 564, 560, 565, 95, 564, 565,
		561, 560, 564, 563, 565, 560, 566, 558, 567, 218, 566, 567, 562, 558, 566, 561, 567, 558, 568, 559, 569, 334, 568, 569, 563, 559, 568, 562, 569, 559,
		570, 571, 572, 100, 570, 572, 563, 571, 570, 356, 572, 571, 102, 572, 358, 103, 102, 358, 100, 572, 102, 356, 358, 572, 565, 570, 105, 95, 565, 105,
		563, 570, 565, 100, 105, 570, 360, 571, 568, 334, 360, 568, 356, 571, 360, 563, 568, 571, 573, 574, 575, 222, 573, 575, 561, 574, 573, 119, 575, 574,
		223, 575, 121, 123, 223, 121, 222, 575, 223, 119, 121, 575, 567, 573, 224, 218, 567, 224, 561, 573, 567, 222, 224, 573, 124, 574, 564, 95, 124, 564,
		119, 574, 124, 561, 564, 574, 576, 577, 578, 339, 576, 578, 562, 577, 576, 234, 578, 577, 341, 578, 236, 238, 341, 236, 339, 578, 341, 234, 236, 578,
		569, 576, 343, 334, 569, 343, 562, 576, 569, 339, 343, 576, 239, 577, 566, 218, 239, 566, 234, 577, 239, 562, 566, 577, 579, 580, 581, 582, 579, 581,
		583, 580, 579, 584, 581, 580, 585, 581, 586, 331, 585, 586, 582, 581, 585, 584, 586, 581, 587, 579, 588, 252, 587, 588, 583, 579, 587, 582, 588, 579,
		589, 580, 590, 136, 589, 590, 584, 580, 589, 583, 590, 580, 591, 592, 593, 357, 591, 593, 584, 592, 591, 149, 593, 592, 359, 593, 150, 103, 359, 150,
		357, 593, 359, 149, 150, 593, 586, 591, 361, 331, 586, 361, 584, 591, 586, 357, 361, 591, 151, 592, 589, 136, 151, 589, 149, 592, 151, 584, 589, 592,
		594, 595, 596, 278, 594, 596, 582, 595, 594, 347, 596, 595, 280, 596, 349, 281, 280, 349, 278, 596, 280, 347, 349, 596, 588, 594, 283, 252, 588, 283,
		582, 594, 588, 278, 283, 594, 351, 595, 585, 331, 351, 585, 347, 595, 351, 582, 585, 595, 597, 598, 599, 156, 597, 599, 583, 598, 597, 268, 599, 598,
		158, 599, 270, 159, 158, 270, 156, 599, 158, 268, 270, 599, 590, 597, 161, 136, 590, 161, 583, 597, 590, 156, 161, 597, 272, 598, 587, 252, 272, 587,
		268, 598, 272, 583, 587, 598, 600, 601, 602, 603, 600, 602, 604, 601, 600, 605, 602, 601, 606, 602, 607, 449, 606, 607, 603, 602, 606, 605, 607, 602,
		608, 600, 609, 173, 608, 609, 604, 600, 608, 603, 609, 600, 610, 601, 611, 92, 610, 611, 605, 601, 610, 604, 611, 601, 612, 613, 614, 469, 612, 614,
		605, 613, 612, 109, 614, 613, 471, 614, 111, 113, 471, 111, 469, 614, 471, 109, 111, 614, 607, 612, 473, 449, 607, 473, 605, 612, 607, 469, 473, 612,
		114, 613, 610, 92, 114, 610, 109, 613, 114, 605, 610, 613, 615, 616, 617, 199, 615, 617, 603, 616, 615, 462, 617, 616, 201, 617, 463, 202, 201, 463,
		199, 617, 201, 462, 463, 617, 609, 615, 204, 173, 609, 204, 603, 615, 609, 199, 204, 615, 464, 616, 606, 449, 464, 606, 462, 616, 464, 603, 606, 616,
		618, 619, 620, 120, 618, 620, 604, 619, 618, 189, 620, 619, 122, 620, 191, 123, 122, 191, 120, 620, 122, 189, 191, 620, 611, 618, 125, 92, 611, 125,
		604, 618, 611, 120, 125, 618, 193, 619, 608, 173, 193, 608, 189, 619, 193, 604, 608, 619, 621, 622, 623, 624, 621, 623, 625, 622, 621, 626, 623, 622,
		627, 623, 628, 139, 627, 628, 624, 623, 627, 626, 628, 623, 629, 621, 630, 297, 629, 630, 625, 621, 629, 624, 630, 621, 631, 622, 632, 452, 631, 632,
		626, 622, 631, 625, 632, 622, 633, 634, 635, 143, 633, 635, 626, 634, 633, 468, 635, 634, 144, 635, 470, 113, 144, 470, 143, 635, 144, 468, 470, 635,
		628, 633, 145, 139, 628, 145, 626, 633, 628, 143, 145, 633, 472, 634, 631, 452, 472, 631, 468, 634, 472, 626, 631, 634, 636, 637, 638, 301, 636, 638,
		624, 637, 636, 155, 638, 637, 302, 638, 157, 159, 302, 157, 301, 638, 302, 155, 157, 638, 630, 636, 303, 297, 630, 303, 624, 636, 630, 301, 303, 636,
		160, 637, 627, 139, 160, 627, 155, 637, 160, 624, 627, 637, 639, 640, 641, 456, 639, 641, 625, 640, 639, 313, 641, 640, 457, 641, 315, 317, 457, 315,
		456, 641, 457, 313, 315, 641, 632, 639, 458, 452, 632, 458, 625, 639, 632, 456, 458, 639, 318, 640, 629, 297, 318, 629, 313, 640, 318, 625, 629, 640
		 };
		 s.vn = static_cast<unsigned int> (s.positions.size() / 3);
		 s.fn = static_cast<unsigned int> (s.indices.size() / 3);

	 }
	 static renderable sphere() {
		 renderable res;
		 shape s;
		 sphere(s);
		 s.to_renderable(res);
		 return res;
	 }

	 static int pos(int i, int j, int stacks) {
		 return j*(stacks + 1) + i;
	 }
	 static void torus(shape & s, float in_radius, float out_radius,unsigned int stacks, unsigned int slices) {
		 // vertices definition
		 ////////////////////////////////////////////////////////////
		 s.texcoords.resize(2 * ((stacks + 1)*(slices + 1)));
		 s.positions.resize(3 * ((stacks + 1)*(slices + 1)));

		 float step_slices = (float)6.283185307179586476925286766559 / slices;
		 float step_stacks = (float)6.283185307179586476925286766559 / stacks;

		 glm::mat4 R(1.0);
		 glm::vec4 p(0.0);
		 for (unsigned int i = 0; i < stacks + 1; ++i) {
			 R=  glm::rotate(glm::mat4(1.f), step_stacks*i, glm::vec3(0, 1, 0));

			 for (unsigned int j = 0; j < slices + 1; ++j) {
				 float x = in_radius*cos(j*step_slices);
				 float y = in_radius*sin(j*step_slices);
				 float z = 0.0;

				 x += out_radius;

				 p = R*glm::vec4(x, y, z, 1.0);

				 s.positions[3 * pos(i, j, stacks)] = p[0];
				 s.positions[3 * pos(i, j, stacks) + 1] = p[1];
				 s.positions[3 * pos(i, j, stacks) + 2] = p[2];
				

				 s.texcoords[2 * pos(i, j, stacks)] = i / (1.f*stacks);
				 s.texcoords[2 * pos(i, j, stacks) + 1] = j / (1.f*slices);
			 }
		 }

		 // triangles defition
		 ////////////////////////////////////////////////////////////



		 s.indices.resize((stacks)*(slices) * 2 * 3);
		 int n = 0;
		 for (unsigned int i = 0; i < stacks; ++i)
			 for (unsigned int j = 0; j < slices; ++j) {
				 int i1 = (i + 1);//%stacks;
				 int j1 = (j + 1);//%slices;

				 s.indices[3 * n] = pos(i, j,stacks);
				 s.indices[3 * n + 1] = pos(i1, j, stacks);
				 s.indices[3 * n + 2] = pos(i1, j1, stacks);
				 n++;
				 s.indices[3 * n] = pos(i, j, stacks);
				 s.indices[3 * n + 1] = pos(i1, j1, stacks);
				 s.indices[3 * n + 2] = pos(i, j1, stacks);
				 n++;
			 }


		 s.vn = (unsigned  int)s.positions.size() / 3;
		 s.fn = (unsigned  int)s.indices.size() / 3;
	 }


	};